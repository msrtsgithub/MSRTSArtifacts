<##################################################################################################

    Description
    ===========

    - This script copies the files to enable an admin after sysprep to the appropriate folder on the VM. This
    folder is used by sysprep when looking for setup commands.
    
    - This script removes all the iis express certificates before sysprep is executed 

    - If the destination folder does not exist, it will be created.

    - The following logs are generated on the machine - 
        - This script's log : $PSScriptRoot\enable-admin-after-sysprep folder.


    Prerequisite
    ============

    - Ensure that the powershell execution policy is set to unrestricted or bypass.

    - Ensure that powershell is run elevated.


    Known issues / Caveats
    ======================
    
    - No known issues.


    Coming soon / planned work
    ==========================
    
    - N/A.

##################################################################################################>

#
# Optional arguments to this script file (None).
#

##################################################################################################

#
# Powershell Configurations
#

# Note: Because the $ErrorActionPreference is "Stop", this script will stop on first failure.  
#$ErrorActionPreference = "stop"

###################################################################################################

#
# Custom Configurations
#

# Location of the log files
$EnableAdminFolder = Join-Path $PSScriptRoot -ChildPath $("enable-admin-after-sysprep-" + [System.DateTime]::Now.ToString("yyyy-MM-dd-HH-mm-ss"))
$ScriptLogFolder = Join-Path -Path $EnableAdminFolder -ChildPath "Logs"
$ScriptLog = Join-Path -Path $ScriptLogFolder -ChildPath "EnableAdminAfterSysprep.log"

Write-Host "The log files can be found on the VM in the folder $ScriptLogFolder."

##################################################################################################

##################################################################################################

# 
# Description:
#  - Creates the folder structure which'll be used for dumping logs generated by this script and
#    the logon task.
#
# Parameters:
#  - N/A.
#
# Return:
#  - N/A.
#
# Notes:
#  - N/A.
#

function InitializeFolders
{
    if (!(Test-Path -Path $EnableAdminFolder))
    {
        New-Item -Path $EnableAdminFolder -ItemType directory | Out-Null
    }

    if (!(Test-Path -Path $ScriptLogFolder))
    {
        New-Item -Path $ScriptLogFolder -ItemType directory | Out-Null
    }
}

##################################################################################################

# 
# Description:
#  - Writes specified string to the script log (indicated by $ScriptLog).
#
# Parameters:
#  - $message: The string to write.
#
# Return:
#  - N/A.
#
# Notes:
#  - N/A.
#

function WriteLog
{
    Param(
        #<# Can be null or empty #> $message
    )

    $timestampedMessage = $("[" + [System.DateTime]::Now + "] " + $message) | % {
        Out-File -InputObject $_ -FilePath $ScriptLog -Append
    }
	
	Write-Host $message
}

##################################################################################################

##################################################################################################

# 
# Description:
#  - Identifies the IIS express certificates and removes them from the local machine
#
# Parameters:
#  - N/A.
#
# Return:
#  - N/A.
#
# Notes:
#  - N/A.
#


#
#
#

##################################################################################################

#
#
#

try
{
    InitializeFolders
    # the folder to copy the files that will preserve the local admin
    $destinationFolder = "C:\GitHubTest"
    $filesToCopy =         
        "readerdc_en_db_install.exe"

    
    WriteLog "Checking if $destinationFolder exists."

    if (Test-Path -path $destinationFolder)
    {
        WriteLog "$destinationFolder already exists."
		
		WriteLog "Checking if any of the files already exist in the destination."
		foreach($file in $filesToCopy)
		{
			$destFile = Join-Path $destinationFolder -ChildPath $file
			
			if(Test-Path -path $destFile)
			{
				WriteLog "WARNING: The file $destFile already exists. This file will be overwritten."
			}
		}
    }
    else
    {
        WriteLog "$destinationFolder does not exist. Creating..."
        New-Item $destinationFolder -Type Directory
        WriteLog "Finished creating folder $destinationFolder."
    }

    WriteLog "Copying required files to $destinationFolder."
    foreach($file in $filesToCopy)
    {
        $sourceFile = Join-Path $PSScriptRoot -ChildPath $file
        Copy-Item $sourceFile -Destination $destinationFolder -Force
    }
    WriteLog "Finished copying files."
    
        Start-Process ($destinationFolder + "\readerdc_en_db_install.exe" ) /sPB -wait
}
catch
{
    if (($null -ne $Error[0]) -and ($null -ne $Error[0].Exception) -and ($null -ne $Error[0].Exception.Message))
    {
        $errMsg = $Error[0].Exception.Message
        WriteLog $errMsg
        Write-Host $errMsg
    }

    # Important note: Throwing a terminating error (using $ErrorActionPreference = "stop") still returns exit 
    # code zero from the powershell script. The workaround is to use try/catch blocks and return a non-zero 
    # exit code from the catch block. 
    exit -1
}